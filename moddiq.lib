///////////////////////////////////////////////////////////////////////////////
version="version moddiq.lib 4.2.0.0 March_2021 "; // $Id$
category="Commutative Algebra";
info="
LIBRARY:  moddiq.lib       Double ideal quotient using modular methods

AUTHORS:  Y. Ishihara     yishihara@rikkyo.ac.jp

OVERVIEW:
  A library for computing (double) ideal quotient and saturation in the polynomial ring
  over the rational numbers using modular methods.

REFERENCES:
  M. Noro, K. Yokoyama: Usage of Modular Techniques for Efficient Computation of Ideal Operations. 
  Math.Comput.Sci. 12: 1, 1-32. (2017). 
  Y. Ishihara.: Modular techniques for effective localization and double ideal quotient.
  In Proceedings of ISSAC'20, ACM, 265-272 (2020)

PROCEDURES:
  modQuotient(I,J); a basis of (I:J) using modular methods
  modSat(I,J); a basis of (I:J^\infty) using modular methods
  diq(I,J); a basis of the double ideal quotient (I:(I:J))
  modDiq(I,J); a basis of the double ideal quotient (I:(I:J))
               using modular methods
  modIsAssociated(I,P); check if P is associated with I or not using modular methods

UPCOMING PROCEDURES:
  IntermediatePrimaryDecomposition(I); compute intermediate primary decomposition of I
                                       by using modular method
";

LIB "polylib.lib";
LIB "elim.lib";
LIB "modular.lib";
LIB "modstd.lib";

proc modQuotient(def I, def J)
"USAGE:   modQuotient(I,J); I,J ideal
RETURN:   a basis of (I:J)
NOTE:     The procedure computes a basis of (I:J) (over the rational
          numbers) by using modular methods.
SEE ALSO: modular
EXAMPLE:  example modQuotient; shows an example"
{
    if(!attrib(I, "isSB")){I = std(I);}
    def IJ=modular("quotient",list(I,J),primeTest_quotient,
      Modstd::deleteUnluckyPrimes_std,pTest_quotient,finalTest_quotient);
    return(IJ);
}
example
{
    "EXAMPLE:";
    echo=2;
    ring r=0,x(1..6),dp;
    ideal i=cyclic(6);
    ideal j=-15*var(5)+16*var(6)^3-60*var(6)^2+225*var(6)-4,2*var(5)^2-7*var(5)+2*var(6)^2-7*var(6)+28,(4*var(6)-1)*var(5)-var(6)+4,4*var(1)+var(5)+var(6),4*var(2)+var(5)+var(6),4*var(3)+var(5)+var(6),4*var(4)+var(5)+var(6); 
    modQuotient(i,modQuotient(i,j));
}

/* test if a prime number p is permissible for an ideal I 
 * i.e. it does not divide the denominator of any of the coeffients
 * or numerator of any of the leading coefficients */
static proc isPermissible(int p,ideal I)
{
    /* erase zero generators */
    def J = simplify(I, 2);

    /* clear denominators and compute the leading coeffients of
       the cleared one and the original one*/
    int n = ncols(J);
    int i;
    ideal K;
    for(i = n; i > 0; i--)
    {
        K[i] = leadcoef(cleardenom(J[i]))*var(1)+leadcoef(J[i]);
    }

    /* change to characteristic p */
    def br = basering;
    list lbr = ringlist(br);
    if (typeof(lbr[1]) == "int") { lbr[1] = p; }
    else { lbr[1][1] = p; }
    def rp = ring(lbr);
    setring(rp);
    ideal Kp = fetch(br, K);

    /* test if any leading coefficient is missing */
    if (intvec(size(Kp[1..n])) != 2:n) { setring(br); return(0); }
    setring(br);
    return(1);
}

/* test if the prime p is permissible for I and J */
static proc primeTest_quotient(int p, alias list args)
{
    def I = args[1];
    def J = args[2];
    if(!isPermissible(p,I)){print("not permissible");return(0);}
    if(!isPermissible(p,J)){print("not permissible");return(0);}
    return(1);
}

/* test if 'command' applied to 'args' in characteristic p is the same as
   'result' mapped to characteristic p */
static proc pTest_quotient(string command, alias list args, alias def result,
    int p)
{
    /* change to characteristic p */
    def br = basering;
    list lbr = ringlist(br);
    if (typeof(lbr[1]) == "int") { lbr[1] = p; }
    else { lbr[1][1] = p; }
    def rp = ring(lbr);
    setring(rp);
    list args_fetched = fetch(br, args);
    def Ip = args_fetched[1];
    def Jp = args_fetched[2];
    def Gp = fetch(br, result);
    def IJp;
    attrib(Ip, "isSB", 1);
    Gp = std(Gp);

    /* test if (Ip:Jp) is in Gp */
    /* compute command(args) */
    execute("IJp = "+command+"(Ip,Jp);");
    int i;
    for (i = ncols(IJp); i > 0; i--)
    {
        if (reduce(IJp[i], Gp, 1) != 0)
        {
            setring(br);
            return(0);
        }
    }
    
    /* test if Gp is in (Ip:Jp) */
    ideal GpJp = Gp*Jp;
    for (i = ncols(GpJp); i > 0; i--)
    {
        if (reduce(GpJp[i], Ip, 1) != 0) { setring(br); return(0); }
    }
    setring(br);
    return(1);
}

/* test if 'result' is a basis of (I:J) */
static proc finalTest_quotient(string command, alias list args, def result)
{
    /* test if result is in (I:J)*/
    int i;
    def IJ = result * args[2];
    for (i = ncols(IJ); i > 0; i--)
    {
        if (reduce(IJ[i], args[1], 1) != 0) {print("fail") return(0); }
    }
    return(1);
}

proc modSat(def I, def J)
"USAGE:   modSat(I,J); I,J ideal
RETURN:   a basis of (I:J^\infty)
NOTE:     The procedure computes a basis of (I:J^\infty) (over the rational
          numbers) by using modular methods.
SEE ALSO: modular
EXAMPLE:  example modSat; shows an example"
{
    if(!attrib(I, "isSB")){I = std(I);}
    def IJ=modular("sat",list(I,J),primeTest_quotient,
      deleteUnluckyPrimes_sat,pTest_sat,finalTest_sat);
    return(IJ);
}
example
{
    "EXAMPLE:";
    echo=2;
    ring r=0,x(1..6),dp;
    ideal i=cyclic(6);
    ideal j=-15*var(5)+16*var(6)^3-60*var(6)^2+225*var(6)-4,2*var(5)^2-7*var(5)+2*var(6)^2-7*var(6)+28,(4*var(6)-1)*var(5)-var(6)+4,4*var(1)+var(5)+var(6),4*var(2)+var(5)+var(6),4*var(3)+var(5)+var(6),4*var(4)+var(5)+var(6); 
    modSat(i,modSat(i,j)[1])[1];
}

/* find entries in modresults which come from unlucky primes.
 * For this, sort the entries into categories depending on their leading
 * ideal and return the indices in all but the biggest category. 
 * Referring to Modstd::deleteUnlickyPrimes_std. */
static proc deleteUnluckyPrimes_sat(alias list modresults)
{
    int size_modresults = size(modresults);

    /* sort results into categories.
     * each category is represented by three entries:
     * - the corresponding leading ideal
     * - the number of elements
     * - the indices of the elements
     */
    list cat;
    int size_cat;
    def L=modresults[1][1]; // dummy assign to get the type of L
    int i;
    int j;
    for (i = 1; i <= size_modresults; i++)
    {
        L = lead(modresults[i][1]);
        attrib(L, "isSB", 1);
        for (j = 1; j <= size_cat; j++)
        {
            if (size(L) == size(cat[j][1]))
            {
            if (size(reduce(L, cat[j][1], 5)) == 0)
            {
            if (size(reduce(cat[j][1], L, 5)) == 0)
            {
                cat[j][2] = cat[j][2]+1;
                cat[j][3][cat[j][2]] = i;
                break;
            }
            }
            }
        }
        if (j > size_cat)
        {
            size_cat++;
            cat[size_cat] = list();
            cat[size_cat][1] = L;
            cat[size_cat][2] = 1;
            cat[size_cat][3] = list(i);
        }
    }

    /* find the biggest categories */
    int cat_max = 1;
    int max = cat[1][2];
    for (i = 2; i <= size_cat; i++)
    {
        if (cat[i][2] > max)
        {
            cat_max = i;
            max = cat[i][2];
        }
    }

    /* return all other indices */
    list unluckyIndices;
    for (i = 1; i <= size_cat; i++)
    {
        if (i != cat_max) { unluckyIndices = unluckyIndices + cat[i][3]; }
    }
    return(unluckyIndices);
}

/* test if 'command' applied to 'args' in characteristic p is the same as
   'result' mapped to characteristic p */
static proc pTest_sat(string command, alias list args, alias def result,
    int p)
{
    /* change to characteristic p */
    def br = basering;
    list lbr = ringlist(br);
    if (typeof(lbr[1]) == "int") { lbr[1] = p; }
    else { lbr[1][1] = p; }
    def rp = ring(lbr);
    setring(rp);
    list args_fetched = fetch(br, args);
    def Ip = args_fetched[1];
    def Jp = args_fetched[2];
    def pResult = fetch(br, result);
    def Gp=pResult[1];
    def IJp;
    attrib(Ip, "isSB", 1);
    attrib(Gp, "isSB", 1);

    /* test if (Ip:Jp^\infty) is in Gp */
    /* compute command(args) */
    execute("IJp = "+command+"(Ip,Jp)[1];");
    int i;
    for (i = ncols(IJp); i > 0; i--)
    {
        if (reduce(IJp[i], Gp, 1) != 0)
        {
            setring(br);
            return(0);
        }
    }
    
    /* test if Gp is in (Ip:Jp^\infty) */
    for (i = ncols(Gp); i > 0; i--)
    {
        if (reduce(Gp[i], IJp, 1) != 0) { setring(br); return(0); }
    }
    setring(br);
    return(1);
}

/* test if 'result' is a basis of (I:J^\infty) */
static proc finalTest_sat(string command, alias list args, def result)
{
    /* test if result is in (I:J^\infty)*/
    int i;
    ideal H = result[1];
    int m = 0;
    for (i = 0 ; i < result[2]; i++){m++;}
    ideal JGm;
    for (i = 1 ; i <= size(args[2]); i++)
    {
      JGm = JGm + args[2][i]^m;
    }
    def K = H * JGm;
    for (i = ncols(K); i > 0; i--)
    {
        if (reduce(K[i], args[1], 1) != 0) {print("fail") return(0); }
    }
    return(1);
}

proc diq(def I, def J, #)
"USAGE:   diq(I,J); I,J ideal
RETURN:   a  basis of (I:(I:J))
NOTE:     The procedure computes a basis of (I:(I:J)) (over the rational
          numbers).
EXAMPLE:  example diq; shows an example"
{
    ideal IJ=quotient(I,J);
    ideal IIJ=quotient(I,IJ);
    return(IIJ);
}
example
{
    "EXAMPLE:";
    echo = 2;
    ring r=0,(x,y),dp;
    ideal i=x2,xy;
    ideal j=x;
    diq(i,j);
}

proc modDiq(def I, def J)
"USAGE:   modDiq(I,J); I,J ideal
RETURN:   a basis of (I:(I:J))
NOTE:     The procedure computes a basis of (I:(I:J)) (over the rational
          numbers) by using modular methods.
SEE ALSO: modular
EXAMPLE:  example modDiq; shows an example"
{
    if(!attrib(I,"isSB")){I = std(I);}
    if(!attrib(J,"isSB")){J = std(J);}
    def IJ = modQuotient(I,J);
    def IIJ = modular("diq",list(I,J,IJ),primeTest_quotient,Modstd::deleteUnluckyPrimes_std,pTest_diq,finalTest_diq);
    return(IIJ);
}
example
{
    "EXAMPLE:";
    echo = 2;
    ring r=0,x(1..6),dp;
    ideal i=cyclic(6);
    ideal j=-15*var(5)+16*var(6)^3-60*var(6)^2+225*var(6)-4,2*var(5)^2-7*var(5)+2*var(6)^2-7*var(6)+28,(4*var(6)-1)*var(5)-var(6)+4,4*var(1)+var(5)+var(6),4*var(2)+var(5)+var(6),4*var(3)+var(5)+var(6),4*var(4)+var(5)+var(6); 
    modDiq(i,j);
}

/* test if 'diq' applied to 'args[1],args[2]' in characteristic p is the same as
   'result' mapped to characteristic p 
   test if 'quotient' applied to '[args[1],args[2]]' in characteristic p is 
   the same as args[3] mapped to characteristic p
   (Since (Ip:Jp)\supset (I:J)p always holds, it is enough to check the other
   inclusion) */
static proc pTest_diq(string command, alias list args, alias def result,
    int p)
{
    /* change to characteristic p */
    def br = basering;
    list lbr = ringlist(br);
    if (typeof(lbr[1]) == "int") { lbr[1] = p; }
    else { lbr[1][1] = p; }
    def rp = ring(lbr);
    setring(rp);
    list args_fetched = fetch(br, args);
    def Ip = args_fetched[1];
    def Jp = args_fetched[2];
    def IJp = args_fetched[3];
    def Gp = fetch(br, result);
    def IpJp;
    def IpIpJp;
    attrib(Gp, "isSB", 1);
    Gp = std(Gp);

    /* test if (Ip:(Ip:Jp)) is in Gp */
    int i;
    /* compute diq(Ip,Jp) */
    IpJp = quotient(Ip, Jp);
    IpIpJp = quotient(Ip, IpJp);
    for (i = ncols(IpIpJp); i > 0; i--)
    {
        if (reduce(IpIpJp[i], Gp, 1) != 0)
        {
            setring(br);
            return(0);
        }
    }

    /* test if Gp is in (Ip:(Ip:Jp)) */
    if(!attrib(IpIpJp, "isSB")){IpIpJp = std(IpIpJp)};
    for (i = ncols(Gp); i > 0; i--)
    {
        if (reduce(Gp[i], IpIpJp, 1) != 0) { setring(br); return(0); }
    }

    /* test if (Ip:Jp) is in IJp */
    if(!attrib(IJp, "isSB")){IJp = std(IJp)};
    for (i = ncols(IpJp); i > 0; i--)
    {
        if (reduce(IpJp[i], IJp, 1) != 0)
        {
            setring(br);
            return(0);
        }
    }
    setring(br);
    return(1);
}

/* test if 'result' is a basis of (I:(I:J)) */
static proc finalTest_diq(string command, alias list args, def result)
{
    /* test if result is in (I:(I:J))*/
    int i;
    ideal IJ = args[3];
    ideal RIJ = result * IJ;
    for (i = ncols(RIJ); i > 0; i--)
    {
        if (reduce(RIJ[i], args[1], 1) != 0) {print("fail"); return(0); }
    }
    return(1);
}

proc modIsAssociated(def I, def P)
"USAGE:   modIsAssociated(I,P); I,P ideal
RETURN:   1 if P is an associated prime
          0 if P is not an associated prime
NOTE:     The procedure tests if P is associated with I or not
          by using modular methods. 
SEE ALSO: modular
/*referring to Modular::modular */
{
    if(!attrib(I,"isSB")){I = std(I);}
    def Command = "Moddiq::isAssociated";
    def Arguments = list(I,P);
    def primeTest = primeTest_quotient;
    def pTest = pTest_quotient;
    int finalTest = 1;
    ideal IP;
    ideal IIP;
    def RP;
    def RIP;

    /* check for errors */
    if (char(basering) != 0)
    { ERROR("The characteristic must be zero."); }

    /* auxiliary variables */
    int i;

    /* set maximal prime number */
    int pmax = 2147483647;
    if (npars(basering) > 0)
    {
        pmax = 536870909;   // prime(2^29)
    }

    /* modular computations */
    def result;
    def result_lift;
    bigint N = 1;
    list modresults;
    list primes;
    int nAllPrimes;
    int nNewPrimes;
    int p;
    list indices;
    int ncores_available;
    int product_primes;

    /* export command and arguments */
    exportto(Modular, Command);
    exportto(Modular, Arguments);
    exportto(Modular, primeTest);

    while (1)
    {
        // compute list of primes
        if (nAllPrimes == 0)
        {
            nNewPrimes = Modular::NbModProcs();
        }
        else
        {
            ncores_available = max(1, system("semaphore", "get_value",
                    Resources::sem_cores)+1);
            if (nAllPrimes < ncores_available)
            {
                nNewPrimes = nAllPrimes;
            }
            else
            {
                nNewPrimes = (nAllPrimes div ncores_available)
                    *ncores_available;
            }
        }
        primes = Modular::primeList(nNewPrimes, pmax);
        pmax = primes[size(primes)]-1;
        nAllPrimes = nAllPrimes+nNewPrimes;

        // do computation modulo several primes
        for (i = size(primes); i > 0; i--)
        {
            task t(i) = "Modular::modp", primes[i];
        }
        startTasks(t(1..size(primes)));
        waitAllTasks(t(1..size(primes)));
        for (i = size(primes); i > 0; i--)
        {
            modresults[i] = getResult(t(i));
            killTask(t(i));
            kill t(i);
        }

        // delete unlucky primes
        indices = deleteUnluckyPrimes_sat(modresults);
        indices = sort(indices)[1];
        for (i = size(indices); i > 1; i--)
        {
            if (indices[i] == indices[i-1])
            {
                indices = delete(indices, i);
            }
        }
        for (i = size(indices); i > 0; i--)
        {
            modresults = delete(modresults, indices[i]);
            primes = delete(primes, indices[i]);
        }

        // lift result
        if (N == 1)
        {
            result_lift = Modular::chinrem_recursive(modresults, primes);
        }
        else
        {
            result_lift = Modular::chinrem_recursive(list(result_lift)+modresults,
                list(N)+primes);
        }
        for (i = size(primes); i > 0; i--)
        {
            N = N*primes[i];
        }
        // apply farey
        result = Modular::farey_parallel(result_lift, N); 

        // pTest
        p = prime(random(pmax div 2, pmax-1));
        while (!primeTest_quotient(p, Arguments))
        {
            if (p <= 2) { ERROR("no more primes"); }
            p = prime(random(p div 2, p-1));
        }
        
        // define IP as a candidate of a GB of (I:P)
        IP = ideal(result[2]);

        // check if IP is a GB of (I:P) or not
        if (!pTest("quotient", Arguments, IP, p)) { continue; }
        RP = IP * P;
        for (i = ncols(RP); i > 0; i--)
        {
            if (reduce(RP[i], I, 1) != 0) {finalTest = 0;break;}
        }

        // check if associated or non-associated
        if (finalTest)
        {
            if (modresults[1][1] == 0)
            {
                // test associated
                if(N > normOfBasis(P)){return(1);}
            }
            else
            {
                // test non-associated
                // pTest
                p = prime(random(pmax div 2, pmax-1));
                while (!primeTest_quotient(p, Arguments))
                {
                    if (p <= 2) { ERROR("no more primes"); }
                    p = prime(random(p div 2, p-1));
                }
                
                // define IIP as a candiate of a GB of (I:(I:P))
                IIP = ideal(result[1]);

                // test if IIP is a GB of (I:(I:P))
                def Arguments_diq = list(I,P,IP); 
                if (!pTest_diq("diq", Arguments_diq, IIP, p)) { continue; }
                RIP = result[1] * IP;
                for (i = ncols(RIP); i > 0; i--)
                {
                    if (reduce(RIP[i], I, 1) != 0) {finalTest = 0;break;}
                }

                if(finalTest){return(0);}
            }
        }
    }
}
example
{
    "EXAMPLE:";
    echo=2;
    ring r=0,x(1..6),dp;
    ideal i=cyclic(6);
    ideal j=-15*var(5)+16*var(6)^3-60*var(6)^2+225*var(6)-4,2*var(5)^2-7*var(5)+2*var(6)^2-7*var(6)+28,(4*var(6)-1)*var(5)-var(6)+4,4*var(1)+var(5)+var(6),4*var(2)+var(5)+var(6),4*var(3)+var(5)+var(6),4*var(4)+var(5)+var(6); 
    modIsAssociated(i,j);
}

/* return list(0,(I:J)) if J is associated with I
 *        list((I:(I:J)),(I:J)) otherwise */
static proc isAssociated(def I, def J)
{
    int i;
    if(!attrib(J,"isSB")){J = std(J);}
    ideal IJ=quotient(I,J);
    ideal IIJ=quotient(I,IJ);
    // check if (I:(I:J))\subset J or not
    for (i = ncols(IIJ); i > 0; i--)
    {
        if (reduce(IIJ[i], J, 1) != 0) 
        {
            list l = IIJ,IJ;
            return(l); 
        }
    }
    ideal k = 0;
    list l = k,IJ;
    return(l);
}

/* compute the norm of Basis i.e.
 * the maximum value of a^2+b^2
 * where a/b is a coefficient of a polynomial in G */
static proc normOfBasis(def G)
{
    int i;
    number coef_biggest;
    number c;
    int index;
    poly f;
    poly g;
    index = size(G);
    coef_biggest = 0;
    for (i = size(G); i>0; i--)
    {
        g = cleardenom(G[i]);
        g = g - lead(g);
        while (g != 0)
        {
            if (leadcoef(g) > coef_biggest)
            {
                coef_biggest = leadcoef(g);
            }
            g = g - lead(g);
        }
    }
    return(int(coef_biggest^2+1));
}
